#+TITLE: Extending =ensembldb=: MySQL backend and protein annotations
#+AUTHOR: Johannes Rainer
#+EMAIL: johannes.rainer@eurac.edu
#+DATE: December 7, 2016
#+SETUPFILE: orgsetup.org

* Extending =ensembldb=: MySQL backend and protein annotations

*Johannes Rainer* (EURAC research), EuroBioC2016, Basel

Twitter/github: /jotsetung/.

** Introduction

+ =ensembldb= package defines the =EnsDb= class:
  - Same functionality than =TxDb= objects (=GenomicFeatures= package), *plus*:
  - Filter framework to enable specific and fast queries.
  - Designed for Ensembl:
  - *NEW*: supports a /MySQL/ backend.
  - *NEW*: provides protein annotations.

+ Full Database layout

  #+BEGIN_SRC ditaa :file dblayout.png

    +-----------------+          +-----------+        +------------------+     +------------------+
    |exon             |          |tx2exon    |        |tx                |     |gene              |
    +-----------------+          +-----------+        +------------------+     +------------------+
    |* exon_id        +----+     |* tx_id    +----+---+* tx_id           |  +--+* gene_id         |
    |* exon_seq_start |    +-----+* exon_id  |    |   |* gene_id         +--+  |* gene_name       |
    |* exon_seq_end   |          +-----------+    |   |* tx_biotype      |     |* gene_biotype    |
    +-----------------+                           |   |* tx_seq_start    |     |* entrezid        |
               	       	       	       	       	  |   |* tx_seq_end      |     |* gene_seq_start  |
                				  |   |* tx_cds_seq_start|     |* gene_seq_end    |
    +-----------------------+                     |   |* tx_cds_seq_end  |  +--+* seq_name        |
    |protein_domain         |                     |   +------------------+  |  |* seq_strand      |
    +-----------------------+                     |                         |  |* seq_coord_system|
    |* protein_domain_id    |                     +-----+                   |  +------------------+
    |* protein_id           +--+                        |                   |
    |* protein_domain_source|  |  +------------------+  |                   |
    |* interpro_accession   |  |  |protein           |  |                   |    +-------------+
    |* prot_dom_start       |  |  +------------------+  |                   |    |chromosome   |
    |* prot_dom_end         |  +--+* protein_id      |  |                   |    +-------------+
    +-----------------------+  |  |* tx_id           +--+                   +----+* seq_name   |
                               |  |* protein_sequence|                           |* seq_length |
    +-----------------------+  |  +------------------+                           |* is_circular|
    |uniprot                |  |                           +----------+          +-------------+
    +-----------------------+  |                           |metadata  |
    |* uniprot_id           |  |                           +----------+
    |* protein_id           +--+                           |* name    |
    |* uniprot_db           |                              |* value   |
    |* uniprot_mapping_type |                              +----------+
    +-----------------------+

  #+END_SRC

    #+RESULTS:
    [[file:dblayout.png]]


** Basic usage

*** Query gene, transcript, exon information

+ Available methods to extract RNA related data:
  - =genes=
  - =transcripts=
  - =transcriptsBy=
  - =exons=
  - =exonsBy=
  - =cdsBy=
  - =fiveUTRsByTranscripts=
  - =threeUTRsByTranscripts=

+ _Example_: get all genes encoded on chromosome Y.

  #+BEGIN_SRC R
    ## Load an EnsDb package matching Ensembl version 86
    library(EnsDb.Hsapiens.v86)
    edb <- EnsDb.Hsapiens.v86

    ## Retrieve all lincRNAs encoded on chromosome Y.
    ## Create the filter objects
    sf <- SeqnameFilter("Y")
    gbf <- GenebiotypeFilter("lincRNA")

    ## Retrieve the data.
    genes(edb, filter = list(sf, gbf))

  #+END_SRC

- Use of filters can speed up queries.

*** Available filters

- For genes: =GeneidFilter=, =GenenameFilter=, =EntrezidFilter=, =GenebiotypeFilter=,
  (=SymbolFilter=).
- For transcripts: =TxidFilter=, =TxbiotypeFilter=.
- For exons: =ExonidFilter=, =ExonrankFilter=.
- For proteins: =ProteinidFilter=, =UniprotidFilter=, =UniprotdbFilter=,
  =UniprotmappingtypeFilter=, =ProteindomainidFilter=.
- Based on chromosomal coordinates: =SeqnameFilter=, =SeqstrandFilter=,
  =SeqstartFilter=, =SeqendFilter=, =GRangesFilter=: condition can be /within/ or
  /overlapping/.

- Multiple filters are combined with a logical /AND/.
- Each filter supports 1:n values and also a /like/ condition.

- _Example_: combine filters.

  #+BEGIN_SRC R
    ## Example for a GRangesFilter:
    grf <- GRangesFilter(GRanges(17, IRanges(59000000, 59200000)),
                         condition="within")

    ## Get all genes encoded in this region.
    genes(edb, filter=grf, columns=c("gene_name", "gene_biotype"))

    ## Combine with a GenebiotypeFilter to get all genes in the region
    ## EXCEPT pre-miRNAs and snRNAs.
    genes(edb, filter=list(grf,
                           GenebiotypeFilter(c("miRNA", "snRNA"),
                                             condition="!=")))

  #+END_SRC


** Building annotation databases

+ =EnsDb= databases can be build from GTF/GFF files or =AnnotationHub=.
+ _Example_: create an =EnsDb= using =AnnotationHub=.

  #+BEGIN_SRC R :results silent :exports code :eval never

    library(AnnotationHub)
    ah <- AnnotationHub()

    ## Query for available Ensembl gtf files for release 83.
    query(ah, pattern=c("ensembl", "release-83", "gtf"))

    ## Select one; in this case: Anolis carolinensis (lizard)
    edbSql83 <- ensDbFromAH(ah=ah["AH50353"])

    ## Let's see what we've got.
    db <- EnsDb(edbSql83)
    genes(db, filter=SeqnameFilter("2"))

    ## Make a package.
    makeEnsembldbPackage(ensdb=edbSql83, version="1.0.0",
                         maintainer="Johannes Rainer <johannes.rainer@eurac.edu>",
                         author="J Rainer")

  #+END_SRC

+ *Preferred way*: using the Ensembl Perl API:
  - Allows to fetch also protein annotations.
  - Requirements: Perl, Bioperl, Ensembl Perl API.


** MySQL backend

+ =useMySQL= method switches from SQLite to MySQL backend:
  - Creates the database if it does not exist (or updates it).
  - Loads the database if already available.

+ _Example_: convert SQLite to MySQL database.
  #+BEGIN_SRC R :results silent :exports code
    ## Re-use the database from before
    db

    ## Create a MySQL database for this EnsDb; entering the data requires rw
    ## access to MySQL, if database exists read only access suffices.
    db_my <- useMySQL(db, host = "localhost", user = "anonuser", pass = "")

    ## Get the connection
    dbconn(db_my)
    dbconn(db)

    genes(db_my, filter = SeqnameFilter(2))

  #+END_SRC

+ MySQL backend enables to have a dedicated, central annotation server.

+ _Example_: list and connect to existing databases.
  #+BEGIN_SRC R :results silent :exports code
    ## Connect to the MySQL database server.
    library(RMySQL)
    dbc <- dbConnect(MySQL(), host = "localhost", user = "anonuser", pass = "")

    ## list all available EnsDb databases.
    listEnsDbs(dbc)

    ## Connect to one of the databases.
    dbc <- dbConnect(MySQL(), host = "localhost", user = "anonuser", pass = "",
                     dbname = "ensdb_dmelanogaster_v86")
    edb <- EnsDb(dbc)
    edb

    genes(edb)
  #+END_SRC


** Protein data
*** Fetch protein data from an =EnsD=.

+ Add protein columns to the =columns= parameter.

+ _Example_: get protein annotations for a gene.

  #+BEGIN_SRC R :results silent :exports code
    library(EnsDb.Hsapiens.v86)
    edb <- EnsDb.Hsapiens.v86

    ## Get protein annotations for genes by adding specific columns:
    genes(edb, filter = GenenameFilter("ZBTB16"), columns = c("uniprot_id"))

    ## To list all available protein related columns:
    listProteinColumns(edb)

    ## Get all genes with a C2H2 Zinc finger domain.
    pfam <- ProtdomidFilter("PF13912")
    genes(edb, filter = pfam, columns = "gene_name")
  #+END_SRC

+ =proteins= method to specifically fetch protein data.

+ _Example_: use the =proteins= method.

  #+BEGIN_SRC R
    ## Return the protein annotation as a AAStringSet:
    prts <- proteins(edb, filter = GenenameFilter("ZBTB16"),
                     return.type = "AAStringSet")
    prts

    ## Additional columns are available as mcols:
    mcols(prts)
  #+END_SRC

+ Note: due to the n:m mapping between Ensembl protein ID and Uniprot ID
  redundant results might be returned from the database.

*** Using =ensembldb= with =Pbase=

+ The =Proteins= object: container for proteins and peptide ranges within the AA
  sequence.

+ _Example_: fetch a =Proteins= object for all ZBTB16 proteins including all protein
  domains.

  #+BEGIN_SRC R
    library(Pbase)

    ## Fetch proteins including protein domains for ZBTB16
    prts <- Proteins(edb, filter = GenenameFilter("ZBTB16"))

    ## Amino acid sequence:
    aa(prts)

    ## Peptide features:
    pranges(prts)
  #+END_SRC

+ _Example_: use =ensembldb= to map peptide features to the genome.

  #+BEGIN_SRC R
    ## Map all protein domains to the genome
    gen_map <- mapToGenome(prts, edb)

    ## Plot the results for the first protein (transcript)
    ## Get the gene region track for the first transcript
    tx <- getGeneRegionTrackForGviz(edb, filter = TxidFilter(gen_map[[1]]$tx_id))

    ## Add a protein ID column
    map_1 <- gen_map[[1]]
    map_1$id <- names(map_1)

    ## Plot using Gviz
    library(Gviz)
    plotTracks(list(GenomeAxisTrack(),
                    GeneRegionTrack(tx, name = "tx"),
                    AnnotationTrack(map_1, groupAnnotation = "id",
                                    just.group = "above",
                                    name = "Protein domains")),
               transcriptAnnotation = "transcript")
  #+END_SRC


** Things not covered
+ =ensembldb= provides full =AnnotationDbi= support.
+ _Example_: use =AnnotationDbi='s =select= method to fetch annotations.

  #+BEGIN_SRC R
    ## Get all data for the gene SKA2
    Res <- select(edb, keys="SKA2", keytype="GENENAME")
    head(Res, n=3)

    ## Or: pass filters with keys parameter to have more control:
    ## For the gene SKA2: get all exons except exons 1 and 2
    ## for all tx targeted for nonsense mediated decay.
    select(edb, keys=list(GenenameFilter("SKA2"),
                          TxbiotypeFilter("nonsense_mediated_decay"),
                          ExonrankFilter(1:2, condition="!=")))

  #+END_SRC
+ Easy integration of UCSC and Ensembldb annotations: use =seqlevelsStyle= to
  change chromosome naming scheme in =EnsDb=.
+ _Example_: How to integrate Ensembl based annotation with UCSC data?

  #+BEGIN_SRC R
    ## Get chromosome names
    head(seqlevels(edb))
    ## Different from UCSC style: chr1...

    ## Get genes on chromosome Y, UCSC style.
    genes(edb, filter=SeqnameFilter("chrY"))

    ## Solution: change the chromosome naming style:
    seqlevelsStyle(edb) <- "UCSC"

    ## Get chromosome names
    head(seqlevels(edb))

    genes(edb, filter=SeqnameFilter("chrY"))


    ## Use case:
    ## Get mRNA sequences for SKA2 using BSgenome.
    library(BSgenome.Hsapiens.UCSC.hg38)  ## <- UCSC based

    ## Get exons by transcript
    ska2tx <- exonsBy(edb, by="tx", filter=GenenameFilter("SKA2"))

    ## Use GenomicFeatures' extractTranscriptSeqs
    head(extractTranscriptSeqs(BSgenome.Hsapiens.UCSC.hg38, ska2tx))


    ## Alternative (preferred) way:
    seqlevelsStyle(edb) <- "Ensembl"
    ## Using AnnotationHub:
    ## Get the genomic fasta file matching the package's genome version:
    faf <- getGenomeFaFile(edb)
    extractTranscriptSeqs(faf, exonsBy(edb, by="tx",
                                       filter=GenenameFilter("SKA2")))
  #+END_SRC


** Finally


*Thank you for your attention!*


























